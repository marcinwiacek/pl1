//example with creating two extra separate processes, removing one of them
//and setting another one as interrupt handler (+ calling it)
01 10 02 20 //next process address (no MMU) overwritten by CPU
03 30 04 40
00 00 00 00 //PC for this process overwritten by CPU
00 00 00 00
00 00 00 00 //registers used (currently ignored)
00 00 00 00
00 00 00 00
00 00 00 00 //registers taken "as is"
00 00 00 00
00 00 00 00
00 00 00 00
00 00 00 00
00 00 00 00
00 00 00 00
00 00 00 00
00 00 00 00
00 00 00 00
00 00 00 00
00 00 00 00
00 00 00 00
00 00 00 00
00 00 00 00
00 00 00 00
0c 01 00 01 //proc
0c 01 00 02 //proc
04 02 00 03 //num2reg
09 02 00 02 //loop with cache: loopeqvalue
06 02 00 01 //regminusnum
06 02 00 00 //regminusnum
02 01 00 01 //after loop: ram2reg
04 01 00 05 //num2reg
03 01 00 46 //reg2ram
0F 00 00 02 //int 2
01 0E 00 30 //jmp 0x30
0A 0B 00 00
0A 0B 00 00
00 00 00 00 //next process address (no MMU) overwritten by CPU
00 00 00 00
00 2e 00 00 //PC for this process taken "as is"
01 02 03 04
00 00 00 00 //registers used (currently ignored)
00 00 00 00
00 00 00 00
00 00 00 00 //registers taken "as is"
00 00 00 00
00 00 00 00
00 00 00 00
00 00 00 00
00 00 00 00
00 00 00 00
00 00 00 00
00 00 00 00
00 00 00 00
00 00 00 00
00 00 00 00
00 00 00 00
00 00 00 00
00 00 00 00
00 00 00 00
04 02 00 04 //num2reg
11 01 00 00 //end
09 02 00 02 //loop with cache: loopeqvalue
06 02 00 01 //regminusnum
06 02 00 00 //regminusnum
02 01 00 01 //after loop: ram2reg
04 01 00 05 //num2reg
03 01 00 00 //reg2ram
01 0E 00 00 //jmp 0
FF FF 00 00
01 0E 00 00
0A 0B 00 00
0C 0D 00 00
00 00 00 00 //next process address (no MMU) overwritten by CPU
00 00 00 00
00 2e 00 00 //PC for this process taken "as is"
00 00 00 00
00 00 00 00 //registers used (currently ignored)
00 00 00 00
00 00 00 00
00 00 00 00 //registers taken "as is"
00 00 00 00
00 00 00 00
00 00 00 00
00 00 00 00
00 00 00 00
00 00 00 00
00 00 00 00
00 00 00 00
00 00 00 00
00 00 00 00
00 00 00 00
00 00 00 00
00 00 00 00
00 00 00 00
00 00 00 00
04 02 00 05 //num2reg
0E 00 00 02 //int_reg
04 02 00 06 //num2reg
10 00 00 02 //ret from int
09 02 00 02 //loop with cache: loopeqvalue
06 02 00 01 //regminusnum
06 02 00 00 //regminusnum
02 01 00 01 //after loop: ram2reg
04 01 00 05 //num2reg
03 01 00 46 //reg2ram
01 0E 00 30 //jmp 0x30
0A 0B 00 00
